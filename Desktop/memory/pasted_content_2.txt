#!/bin/bash

# System Monitor o'rnatish skripti
# Bu skript system-monitor-ni o'rnatish va sozlash uchun ishlatiladi

set -e

# Ranglar
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Root tekshirish
if [ "$(id -u)" != "0" ]; then
   echo -e "${RED}Bu skriptni ishga tushirish uchun root huquqiga ega bo'lishingiz kerak.${NC}" 1>&2
   echo -e "${YELLOW}Maslahat: 'sudo ./setup.sh' buyrug'ini ishlatib ko'ring${NC}" 1>&2
   exit 1
fi

echo -e "${BLUE}===== System Monitor o'rnatish uchun yordamchi skript =====${NC}"
echo -e "${YELLOW}Bu skript sizga system-monitor xizmatini o'rnatishda yordam beradi${NC}\n"

# O'rnatish joyini tanlash
INSTALL_DIR="/opt/system-monitor"
CONFIG_DIR="/etc/system-monitor"
SYSTEMD_DIR="/etc/systemd/system"

mkdir -p "$INSTALL_DIR"
mkdir -p "$CONFIG_DIR"

# Telegram Bot sozlamalari
echo -e "${BLUE}Telegram sozlamalari${NC}"
echo -e "${YELLOW}Telegram Bot yaratish uchun @BotFather ga murojaat qiling${NC}"

read -p "Telegram Bot Token [7307193506:AAFPT6sTT-ObsST-iwztmq-PkF8h7dSM0bo]: " BOT_TOKEN
BOT_TOKEN=${BOT_TOKEN:-"7307193506:AAFPT6sTT-ObsST-iwztmq-PkF8h7dSM0bo"}

read -p "Telegram Chat ID [-4244542922]: " CHAT_ID
CHAT_ID=${CHAT_ID:-"-4244542922"}

# Monitoring sozlamalari
echo -e "\n${BLUE}Monitoring sozlamalari${NC}"

read -p "RAM foizi (chegarasi) [80]: " RAM_THRESHOLD
RAM_THRESHOLD=${RAM_THRESHOLD:-80}

read -p "Tekshirish oralig'i (soniyalarda) [60]: " CHECK_INTERVAL
CHECK_INTERVAL=${CHECK_INTERVAL:-60}

read -p "CPU monitoringini yoqish? (true/false) [true]: " MONITOR_CPU
MONITOR_CPU=${MONITOR_CPU:-true}

if [ "$MONITOR_CPU" = "true" ]; then
    read -p "CPU foizi (chegarasi) [90]: " CPU_THRESHOLD
    CPU_THRESHOLD=${CPU_THRESHOLD:-90}
else
    CPU_THRESHOLD=90
fi

read -p "Disk monitoringini yoqish? (true/false) [true]: " MONITOR_DISK
MONITOR_DISK=${MONITOR_DISK:-true}

if [ "$MONITOR_DISK" = "true" ]; then
    read -p "Disk foizi (chegarasi) [90]: " DISK_THRESHOLD
    DISK_THRESHOLD=${DISK_THRESHOLD:-90}
    
    read -p "Disk yo'li [/]: " DISK_PATH
    DISK_PATH=${DISK_PATH:-"/"}
else
    DISK_THRESHOLD=90
    DISK_PATH="/"
fi

read -p "Log fayli [/var/log/system_monitor.log]: " LOG_FILE
LOG_FILE=${LOG_FILE:-"/var/log/system_monitor.log"}

read -p "Log darajasi (DEBUG/INFO/WARNING/ERROR) [INFO]: " LOG_LEVEL
LOG_LEVEL=${LOG_LEVEL:-"INFO"}

# Konfiguratsiya faylini yaratish
echo -e "\n${GREEN}Konfiguratsiya faylini yaratish...${NC}"

cat > "$CONFIG_DIR/config.conf" << EOF
# System Monitor konfiguratsiya fayli
# Telegram bot sozlamalari
BOT_TOKEN="$BOT_TOKEN"
CHAT_ID="$CHAT_ID"

# Monitoring sozlamalari
THRESHOLD=$RAM_THRESHOLD
CHECK_INTERVAL=$CHECK_INTERVAL
LOG_FILE="$LOG_FILE"
LOG_LEVEL="$LOG_LEVEL"

# Xabar sozlamalari
ALERT_MESSAGE_TITLE="ðŸ›‘ SYSTEM MONITOR ALERT"
INCLUDE_TOP_PROCESSES=true
TOP_PROCESSES_COUNT=10

# CPU monitoring (true/false)
MONITOR_CPU=$MONITOR_CPU
CPU_THRESHOLD=$CPU_THRESHOLD

# Disk monitoring (true/false)
MONITOR_DISK=$MONITOR_DISK
DISK_THRESHOLD=$DISK_THRESHOLD
DISK_PATH="$DISK_PATH"
EOF

# Skriptni o'rnatish
echo -e "${GREEN}Monitoring skriptini o'rnatish...${NC}"

cat > "$INSTALL_DIR/system-monitor.sh" << 'EOF'
#!/bin/bash

# System monitoringi va Telegram orqali xabar yuborish uchun skript
CONFIG_FILE="/etc/system-monitor/config.conf"
DEFAULT_LOG_FILE="/var/log/system_monitor.log"
DEFAULT_THRESHOLD=80
DEFAULT_INTERVAL=60
DEFAULT_LOG_LEVEL="INFO"

# Agar konfiguratsiya fayli mavjud bo'lmasa, xatolik
if [ ! -f "$CONFIG_FILE" ]; then
    echo "XATO: Konfiguratsiya fayli topilmadi: $CONFIG_FILE"
    exit 1
fi

# Konfiguratsiya faylini yuklash
source "$CONFIG_FILE"

# Standart qiymatlarni aniqlash
BOT_TOKEN="${BOT_TOKEN:-}"
CHAT_ID="${CHAT_ID:-}"
LOG_FILE="${LOG_FILE:-$DEFAULT_LOG_FILE}"
THRESHOLD="${THRESHOLD:-$DEFAULT_THRESHOLD}"
CHECK_INTERVAL="${CHECK_INTERVAL:-$DEFAULT_INTERVAL}"
LOG_LEVEL="${LOG_LEVEL:-$DEFAULT_LOG_LEVEL}"
ALERT_MESSAGE_TITLE="${ALERT_MESSAGE_TITLE:-ðŸ›‘ RAM ALERT}"
INCLUDE_TOP_PROCESSES="${INCLUDE_TOP_PROCESSES:-true}"
TOP_PROCESSES_COUNT="${TOP_PROCESSES_COUNT:-10}"
MONITOR_CPU="${MONITOR_CPU:-false}"
CPU_THRESHOLD="${CPU_THRESHOLD:-90}"
MONITOR_DISK="${MONITOR_DISK:-false}"
DISK_THRESHOLD="${DISK_THRESHOLD:-90}"
DISK_PATH="${DISK_PATH:-/}"

# Konfiguratsiyani tekshirish
if [ -z "$BOT_TOKEN" ] || [ -z "$CHAT_ID" ]; then
    echo "XATO: BOT_TOKEN va CHAT_ID konfiguratsiya faylida ko'rsatilishi kerak."
    echo "Iltimos, $CONFIG_FILE faylini tahrirlang."
    exit 1
fi

# Log darajasi funksiyalari
LOG_LEVEL_DEBUG=0
LOG_LEVEL_INFO=1
LOG_LEVEL_WARNING=2
LOG_LEVEL_ERROR=3

get_log_level_num() {
    case "$1" in
        "DEBUG") echo $LOG_LEVEL_DEBUG ;;
        "INFO") echo $LOG_LEVEL_INFO ;;
        "WARNING") echo $LOG_LEVEL_WARNING ;;
        "ERROR") echo $LOG_LEVEL_ERROR ;;
        *) echo $LOG_LEVEL_INFO ;;
    esac
}

CURRENT_LOG_LEVEL=$(get_log_level_num "$LOG_LEVEL")

# Log yozish funksiyasi
log_message() {
    local level="$1"
    local message="$2"
    local level_num=$(get_log_level_num "$level")
    
    if [ $level_num -ge $CURRENT_LOG_LEVEL ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - [$level] - $message" >> "$LOG_FILE"
        
        # Debug rejimida console-ga ham yozish
        if [ "$level" = "DEBUG" ] || [ "$level" = "ERROR" ]; then
            echo "$(date '+%Y-%m-%d %H:%M:%S') - [$level] - $message"
        fi
    fi
}

# Log faylini yaratib olish (agar mavjud bo'lmasa)
if [ ! -f "$LOG_FILE" ]; then
    touch "$LOG_FILE"
    chmod 644 "$LOG_FILE"
    log_message "INFO" "Log fayli yaratildi: $LOG_FILE"
fi

log_message "INFO" "System monitoring service boshlandi"
log_message "INFO" "Konfiguratsiya fayli: $CONFIG_FILE"
log_message "DEBUG" "Monitoring sozlamalari: RAM $THRESHOLD%, interval $CHECK_INTERVAL sek"

# System ma'lumotlarini olish funksiyasi
get_system_info() {
    local hostname=$(hostname)
    local server_ip=$(hostname -I | awk '{print $1}')
    local kernel=$(uname -r)
    local uptime=$(uptime -p)
    
    echo "Hostname: $hostname"
    echo "IP: $server_ip"
    echo "Kernel: $kernel"
    echo "Uptime: $uptime"
}

# CPU foydalanishini tekshirish
check_cpu_usage() {
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
    local cpu_usage_int=${cpu_usage%.*}
    
    if [ "$MONITOR_CPU" = "true" ] && [ "$cpu_usage_int" -ge "$CPU_